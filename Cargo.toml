[package]
name = "blas-rs"
version = "0.1.0"
edition = "2021"

[dependencies]
num-traits = "0.2.19"

[lints.clippy]
# priority numbers are arbitrary ints; higher overrides lower.
# blanket clippy category rules appear at the top, while sub category lints appear below with priority levels
all =  { level = "deny", priority = -1 }
complexity =  { level = "deny", priority = -1 }
correctness =  { level = "deny", priority = -1 }
implicit_return = "allow"
nursery =  { level = "deny", priority = -1 }
pedantic =  { level = "deny", priority = -1 }
perf =  { level = "deny", priority = -1 }
restriction =  { level = "deny", priority = -1 }
style =  { level = "deny", priority = -1 }
suspicious =  { level = "deny", priority = -1 }
# blanket-clippy-restriction-lints allows the above blanket deny
blanket-clippy-restriction-lints = { level = "allow", priority = 8 }
# Allowing float-arithmetic is required for this application.
float-arithmetic = { level = "allow", priority = 8 }
# Allowing question_mark_used is an explicit implementation choice.
question_mark_used = { level = "allow", priority = 8 }
# Allowing std_instead_of_alloc as we have no reason to choose alloc,core over std
std_instead_of_alloc = { level = "allow", priority = 8 }
std_instead_of_core = { level = "allow", priority = 8 }
str_to_string = { level = "allow", priority = 4 }
struct_excessive_bools = { level = "allow", priority = 8 }
# Allowing single_call_fn is an explicit choice to promote splitting up large or complicated routines.
single_call_fn = { level = "allow", priority = 4 }
# Allowing shadow_reuse & shadow_same & shadow-unrelated is an explicit style choice, preferring to allow developers to reuse a name even if its type changes.
shadow_reuse = { level = "allow", priority = 4 }
shadow_same = { level = "allow", priority = 4 }
shadow_unrelated = { level = "allow", priority = 4 }
# Allowing semicolon_outside_block & semicolon_if_nothing_returned are an explicit style choice to be flexible when semicolon is required.
semicolon_if_nothing_returned = { level = "allow", priority = 4 }
semicolon_outside_block = { level = "allow", priority = 4 }
# Allowing separated_literal_suffix & unseparated_literal_suffix is an explicit style choice.
separated_literal_suffix = { level = "allow", priority = 4 }
unseparated_literal_suffix = { level = "allow", priority = 4 }
# Allowing absolute_paths is an explicit style choice.
absolute_paths = { level = "allow", priority = 4 }
# Allowing pub_use is an explicit style choice to streamline coding.
pub_use = { level = "allow", priority = 4 }
# Allowing module_name_repetitions, self-named-module-files & mod-module-files are an explicit code layout choice.
mod-module-files = { level = "allow", priority = 4 }
module_name_repetitions = { level = "allow", priority = 4 }
self-named-module-files = { level = "allow", priority = 4 }
# Allowing similar_names due to similar BLAS names
similar_names = { level = "allow", priority = 4 }
# Allowing default_numeric_fallback is an explicit style choice to utilise implicit f64.
default_numeric_fallback = { level = "allow", priority = 4 }
# Allowing missing_docs_in_private_items is an explicit but temporary choice to focus on documentation of public items.
missing_docs_in_private_items = { level = "allow", priority = 2 }
# TODO
impl_trait_in_params = { level = "allow", priority = 4 }
# TODO
missing_inline_in_public_items = { level = "allow", priority = 4 }
# exhaustive_structs looks like it should be enabled for the libs
exhaustive_structs = { level = "allow", priority = 4 }
# TODO
missing_errors_doc = { level = "allow", priority = 4 }
# or_fun_call should be denied, but has lots of hits, including anyhow usage which should be addressed first
or_fun_call = { level = "allow", priority = 4 }
# else_if_without_else should be denied, but has lots of hits. The trailing else will sometimes be an error condition.
else_if_without_else = { level = "allow", priority = 4 }
# pattern_type_mismatch appear to be a false positive sometimes, or require rewriting code which is acceptable.
pattern_type_mismatch = { level = "allow", priority = 4 }
# option-if-let-else requires rewriting code which is acceptable.
option-if-let-else = { level = "allow", priority = 4 }
# unwrap_used should be eliminated
unwrap_used = { level = "allow", priority = 4 }
# TODO
future_not_send = { level = "allow", priority = 4 }
# TODO
unused_async = { level = "allow", priority = 2 }
# as_conversions & cast_lossless & cast-possible-wrap should be replaced with safer wrapped conversion
as_conversions = "deny"
cast-possible-wrap = "deny"
cast_lossless = "deny"
# TODO
clone_on_ref_ptr = { level = "allow", priority = 4 }
# TODO
missing_trait_methods = { level = "allow", priority = 4 }
# single_char_lifetime_names should be improved, but are ok at present
single_char_lifetime_names = { level = "allow", priority = 4 }
# infinite_loop: https://github.com/rust-lang/rust-clippy/issues/12291
infinite_loop = { level = "allow", priority = 4 }
pub_with_shorthand = { level = "allow", priority = 4 }
pub_without_shorthand = { level = "deny", priority = 4 }
# clippy removing pub(crate) is quite confusing at times
redundant_pub_crate = { level = "allow", priority = 4 }
# We might want to revisit allowing partial_pub_fields later
partial_pub_fields = { level = "allow", priority = 4 }
# We are writing a low level maths library, users are expected to know how their types behave
arithmetic_side_effects = { level = "allow", priority = 2}